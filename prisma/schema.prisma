// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// npm install prisma --save-dev

// npx prisma init --datasource-provider sqlite

// Erstellt SQL Datei, die auf der DB ausgeführt wird.
// Muss man machen, wenn man das Schema ändert.

// npx prisma migrate dev --name init

// Falls wir den Server in einem Terminal gestartet haben
// Einfach ein neues Terminal aufmachen

// Datenbank ansehen
// npx prisma studio

// Extension installieren
// In Ordner mit dev.db wechseln
// sqlite3 dev.db
// .schema
// Gibt DDL (Data Definition Language) aus also das was wir für Matura brauchen
// .quit

// format füllt vieles für uns aus >format

// npx prisma validate um zu checken, ob die Datenbank richtig ist.

model Drink {
  id       Int          @id @default(autoincrement())
  name     String
  ml       Float
  price    Float
  alcohol  Float
  bildpfad String?
  orders   DrinkOrder[]
}

// Model für n:m Beziehung
model DrinkOrder {
  id       Int @id @default(autoincrement())
  orderId  Int
  quantity Int
  drinkId  Int

  // onDelete: Cascade löscht das DrinkOrder Element, wenn die entsprechende Order gelöscht wird
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  Drink Drink @relation(fields: [drinkId], references: [id])
}

model Food {
  id       Int         @id @default(autoincrement())
  name     String
  calories Int
  price    Int
  orders   FoodOrder[]
}

model Order {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now())
  drinks     DrinkOrder[]
  foods      FoodOrder[]
  customerId Int

  customer User @relation("CustomerOrders", fields: [customerId], references: [id])
}

model FoodOrder {
  orderId  Int
  foodId   Int
  quantity Int
  notes    String

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  food  Food  @relation(fields: [foodId], references: [id])

  @@id([orderId, foodId])
}

// Wenn wir Order verändern, müssen die bestehenden Eintrage aus der DB gelöscht werden!

model User {
  id           Int     @id @default(autoincrement())
  name         String
  email        String  @unique
  password     String
  createdOrder Order[] @relation("CustomerOrders")
}
